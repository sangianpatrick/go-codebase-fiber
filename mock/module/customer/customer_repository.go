// Code generated by mockery v2.39.2. DO NOT EDIT.

package mock_customer

import (
	context "context"

	entity "github.com/sangianpatrick/go-codebase-fiber/internal/module/customer/entity"
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// CustomerRepository is an autogenerated mock type for the CustomerRepository type
type CustomerRepository struct {
	mock.Mock
}

// BeginTx provides a mock function with given fields: ctx
func (_m *CustomerRepository) BeginTx(ctx context.Context) (*sql.Tx, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BeginTx")
	}

	var r0 *sql.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*sql.Tx, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *sql.Tx); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommitTx provides a mock function with given fields: ctx, tx
func (_m *CustomerRepository) CommitTx(ctx context.Context, tx *sql.Tx) error {
	ret := _m.Called(ctx, tx)

	if len(ret) == 0 {
		panic("no return value specified for CommitTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx) error); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByEmail provides a mock function with given fields: ctx, email, tx
func (_m *CustomerRepository) FindByEmail(ctx context.Context, email string, tx *sql.Tx) (entity.Customer, error) {
	ret := _m.Called(ctx, email, tx)

	if len(ret) == 0 {
		panic("no return value specified for FindByEmail")
	}

	var r0 entity.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *sql.Tx) (entity.Customer, error)); ok {
		return rf(ctx, email, tx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *sql.Tx) entity.Customer); ok {
		r0 = rf(ctx, email, tx)
	} else {
		r0 = ret.Get(0).(entity.Customer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *sql.Tx) error); ok {
		r1 = rf(ctx, email, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RollbackTx provides a mock function with given fields: ctx, tx
func (_m *CustomerRepository) RollbackTx(ctx context.Context, tx *sql.Tx) error {
	ret := _m.Called(ctx, tx)

	if len(ret) == 0 {
		panic("no return value specified for RollbackTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx) error); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: ctx, c, tx
func (_m *CustomerRepository) Save(ctx context.Context, c entity.Customer, tx *sql.Tx) error {
	ret := _m.Called(ctx, c, tx)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Customer, *sql.Tx) error); ok {
		r0 = rf(ctx, c, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCustomerRepository creates a new instance of CustomerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCustomerRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CustomerRepository {
	mock := &CustomerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
